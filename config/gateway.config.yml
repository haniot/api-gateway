http:
  port: ${PORT}
  hostname: 127.0.0.1
admin:
  port: 9876
  hostname: 127.0.0.1

####### API ENDPOINTS DEFINITION ########

####### ACTIVITY ENDPOINT ########
apiEndpoints:
####### USER ENDPOINT ########  
  userApi:
    - host: '*'
      paths: ['/users/auth']
      methods: ['POST']

    - host: '*'
      paths: ['/users']
      methods: ['POST']
      scopes: ['users:register'] 
    
    - host: '*'
      paths: ['/users']
      methods: ['GET']
      scopes: ['users:readAll']

    - host: '*'
      paths: ['/users/*']
      methods: ['GET']
      scopes: ['users:read']

    - host: '*'
      paths: ['/users/*']
      methods: ['DELETE']
      scopes: ['users:remove']

    - host: '*'
      paths: ['/users/*']
      methods: ['PUT']
      scopes: ['users:update']
    

####### SERVICE ENDPOINTS DEFINITIONS ########
serviceEndpoints:
  userService:
    url: ${USER_SERVICE}

####### POLICIES USED IN PIPELINES DEFINITION ########
policies:
  - log
  - proxy
  - rate-limit
  - haniot-jwtScopes-policy
  - haniot-jwt-policy
  - haniot-auth-policy
  - haniot-body-parser-policy
####### PIPELINES DEFINITION ########
#### Pipeline no manage data coming from ACCOUNT PRIVATE and PUBLIC APIs ####

pipelines:
  - name: userPipeline
    apiEndpoints:
      - userApi
    policies: 
      - haniot-body-parser-policy:     
      - haniot-auth-policy:
        - 
          condition:
            name: 'is-auth'
            authpath: '/users/auth'
          action:
            urlauthservice: ${USER_SERVICE}/users/auth
            secretOrPublicKey: ${SECRET_JWT}
            issuer: ${ISSUER}
      - haniot-jwt-policy:
          - action:
              secretOrPublicKey: ${SECRET_JWT}
              issuer: ${ISSUER}
      - haniot-jwtScopes-policy:
      - proxy:
          - action:
              prependPath:  true
              ignorePath:   false
              stripPath:    false
              changeOrigin: true 
              serviceEndpoint: userService 