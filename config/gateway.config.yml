http:
  port: 8080
admin:
  port: 9876
  hostname: 0.0.0.0

####### API ENDPOINTS DEFINITION ########

####### ACTIVITY ENDPOINT ########
apiEndpoints:
####### USER ENDPOINT ########  
  userApi:
    - host: '*'
      paths: ['/users/auth']
      methods: ['POST']

    - host: '*'
      paths: ['/users']
      methods: ['POST']
      scopes: ['users:register'] 
    
    - host: '*'
      paths: ['/users']
      methods: ['GET']
      scopes: ['users:readAll']

    - host: '*'
      paths: ['/users/*']
      methods: ['GET']
      scopes: ['users:read']

    - host: '*'
      paths: ['/users/*']
      methods: ['DELETE']
      scopes: ['users:remove']

    - host: '*'
      paths: ['/users/*']
      methods: ['PUT']
      scopes: ['users:update']
    

####### SERVICE ENDPOINTS DEFINITIONS ########
serviceEndpoints:
  userService:
    url: 'http://localhost:5000/api/v1'

####### POLICIES USED IN PIPELINES DEFINITION ########
policies:
  - log
  - proxy
  - rate-limit
  - haniot-jwtScopes-policy
  - haniot-jwt-policy
  - haniot-auth-policy

####### PIPELINES DEFINITION ########
#### Pipeline no manage data coming from ACCOUNT PRIVATE and PUBLIC APIs ####

pipelines:
  - name: userPipeline
    apiEndpoints:
      - userApi
    policies:
      - haniot-auth-policy:
        - 
          condition:
            name: 'is-auth'
            authpath: '/users/auth'
          action:
            urlauthservice: 'http://localhost:5000/api/v1/users/auth'
            secretOrPublicKey: 'mysecret'
            iss: 'haniot'
      - haniot-jwt-policy:
          - action:
              secretOrPublicKey: 'mysecret'
              issuer: 'haniot'
      - haniot-jwtScopes-policy:
      - proxy:
          - action:
              prependPath:  true
              ignorePath:   false
              stripPath:    false
              changeOrigin: true 
              serviceEndpoint: userService 