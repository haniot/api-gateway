openapi: 3.0.0
info:
  description: >-
    This is the documentation for haniot platform consumers to use to access platform services.
  version: "v1"
  title: HANIoT - API Reference
  contact:
    email: haniot@nutes.uepb.edu.br
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - description: localhost http
    url: 'http://127.0.0.1:8080'
  - description: SwaggerHub API Auto Mocking
    url: 'https://virtserver.swaggerhub.com/haniot/haniot-apigw/v1'
tags:
  - name: users
    description: Operations for the User resource.
paths:
  /users:
    get:
      security:
        - JWTAuth: []  
      tags:
        - users
      summary: Recover users.
      description: >- 
        Returns list with users. The query supports Field Selection, Paging,
        Sorting, and Filtering.
      operationId: getAllUsers
      parameters:
        - $ref: '#/components/parameters/fieldsParam'
        - $ref: '#/components/parameters/pageParam'
        - $ref: '#/components/parameters/limitParam'
        - $ref: '#/components/parameters/sortParam'
        - $ref: '#/components/parameters/filterParam'
      responses:
        '200':
          description: List of users.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '401':
          description: Authentication failed for lack of authentication credentials or the token user is not properly registered as a consumer at the gateway.
          content:
            application/json:
              schema:
                example:
                  code: 401
                  message: UNAUTHORIZED. 
                  description: "Authentication failed for lack of authentication credentials."
                  redirect_link: /users/auth
        '403':
          description: Authorization failed due to insufficient permissions.
          content:
            application/json:
              schema:
                example:
                  code: 403
                  message: FORBIDDEN. 
                  description: "Authorization failed due to insufficient permissions."
        '404':
          description: >-
            Specified resource does not exist. Usually when the URI is incorrect
            or the resource is not found, or even no longer exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '406':
          description: >-
            The server is not implementing the media type requested by the client 
            for the application response. Only application/json is currently 
            accepted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: The rate limit for requests exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            An internal server error occurred. Although the client appears to
            provide a correct request, the server encountered an unexpected 
            condition that prevented it from responding to the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{user_id}:
    get:
      security:
        - JWTAuth: []  
      tags:
        - users
      summary: Recover user data.
      description: Recover the user data.
      operationId: getUserById
      parameters:
        - name: user_id
          in: path
          required: true
          description: User ID
          example: 5accb6215ba48413e81e7853e
          schema:
            type: string
        - $ref: '#/components/parameters/fieldsParam'
      responses:
        '200':
          description: Requested user data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Authentication failed for lack of authentication credentials or the token user is not properly registered as a consumer at the gateway.
          content:
            application/json:
              schema:
                example:
                  code: 401
                  message: UNAUTHORIZED. 
                  description: "Authentication failed for lack of authentication credentials."
                  redirect_link: /users/auth
        '403':
          description: Authorization failed due to insufficient permissions.
          content:
            application/json:
              schema:
                example:
                  code: 403
                  message: FORBIDDEN. 
                  description: "Authorization failed due to insufficient permissions."
        '404':
          description: >-
           Specified resource does not exist. Usually when the URI is incorrect or the
           resource is not found, or even no longer exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '406':
          description: >-
            The server is not implementing the media type requested by the client for
            the application response. Only application/json is currently accepted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: The rate limit for requests exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            An internal server error occurred. Although the client appears to provide a
            correct request, the server encountered an unexpected condition that
            prevented it from responding to the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      security:
        - JWTAuth: []  
      tags: 
      - users
      summary: Update user data.
      description: Update the user data.
      operationId: updateUser
      parameters:
        - name: user_id
          in: path
          required: true
          description: User ID
          example: 5accb6215ba48413e81e7853e
          schema:
            type: string
      responses:
        '200':
          description: Updated user data.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Authentication failed for lack of authentication credentials or the token user is not properly registered as a consumer at the gateway.
          content:
            application/json:
              schema:
                example:
                  code: 401
                  message: UNAUTHORIZED. 
                  description: "Authentication failed for lack of authentication credentials."
                  redirect_link: /users/auth
        '403':
          description: Authorization failed due to insufficient permissions.
          content:
            application/json:
              schema:
                example:
                  code: 403
                  message: FORBIDDEN. 
                  description: "Authorization failed due to insufficient permissions."
        '404':
          description: >-
            Specified resource does not exist. Usually when the URI is incorrect
            or the resource is not found, or even no longer exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '406':
          description: >-
            The server is not implementing the media type requested by the client 
            for the application response. Only application/json is currently 
            accepted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: ->
            Conflicts have probably occurred with data that can not be duplicated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '415':
          description: >-
            The server does not support the requested payload format. Only 
            application/json is accepted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: The rate limit for requests exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            An internal server error occurred. Although the client appears to
            provide a correct request, the server encountered an unexpected 
            condition that prevented it from responding to the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        description: Data of the user to be updated.
        required: true
    delete:
      security:
        - JWTAuth: []  
      tags:
      - users
      summary: Delete user data.
      description: Delete the user data.
      operationId: deleteUserById
      parameters:
        - name: user_id
          in: path
          required: true
          description: User ID
          example: 5accb6215ba48413e81e7853e
          schema:
            type: string
      responses:
        '204':
          description: >- 
            Operation performed successfully. There is no data to be returned
        '401':
          description: Authentication failed for lack of authentication credentials or the token user is not properly registered as a consumer at the gateway.
          content:
            application/json:
              schema:
                example:
                  code: 401
                  message: UNAUTHORIZED. 
                  description: "Authentication failed for lack of authentication credentials."
                  redirect_link: /users/auth
        '403':
          description: Authorization failed due to insufficient permissions.
          content:
            application/json:
              schema:
                example:
                  code: 403
                  message: FORBIDDEN. 
                  description: "Authorization failed due to insufficient permissions."
        '404':
          description: >-
           Specified resource does not exist. Usually when the URI is incorrect or the
           resource is not found, or even no longer exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '406':
          description: >-
            The server is not implementing the media type requested by the client for
            the application response. Only application/json is currently accepted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: The rate limit for requests exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            An internal server error occurred. Although the client appears to provide a
            correct request, the server encountered an unexpected condition that
            prevented it from responding to the request.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /users/{user_id}/password:
    patch:
      security:
        - JWTAuth: []  
      tags:
        - users
      summary: Change user password.
      description: Change the user password.
      operationId: changePassword
      parameters:
        - name: user_id
          in: path
          required: true
          description: User ID
          example: 5accb6215ba48413e81e7853e
          schema:
            type: string
      responses:
        '204':
          description: >- 
            Operation performed successfully. There is no data to be returned
        '400':
          description: >-
            Request can not be met, syntactically incorrect or violates the 
            schema. Normally it occurs due to validation issues, such as 
            fields that are expected in the request body and not passed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication failed for lack of authentication credentials or the token user is not properly registered as a consumer at the gateway.
          content:
            application/json:
              schema:
                example:
                  code: 401
                  message: UNAUTHORIZED. 
                  description: "Authentication failed for lack of authentication credentials."
                  redirect_link: /users/auth
        '403':
          description: Authorization failed due to insufficient permissions.
          content:
            application/json:
              schema:
                example:
                  code: 403
                  message: FORBIDDEN. 
                  description: "Authorization failed due to insufficient permissions."
        '404':
          description: >-
            Specified resource does not exist. Usually when the URI is incorrect
            or the resource is not found, or even no longer exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '406':
          description: >-
            The server is not implementing the media type requested by the client
            for the application response. Only application/json is currently 
            accepted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '415':
          description: >-
           The server does not support the requested payload format. Only 
           application/json is accepted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: The rate limit for requests exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            An internal server error occurred. Although the client appears to
            provide a correct request, the server encountered an unexpected
            condition that prevented it from responding to the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                old_password:
                  type: string
                  example: 'lorem123'
                new_password:
                  type: string
                  example: 'loremipsum123'
        description: Old and new user passwords.
        required: true
  /users/auth:
    post:
      tags:
        - users
      summary: Authenticate user.
      description: |
        Authenticate a user. User authentication is performed using JWT token generation. In generating the JWT token, there are following types of attributes:
        
        **Reserved Claims**: Non-mandatory (but recommended) attributes used in token validation by API security protocols. These are used to create a pattern and are defined in RFC-7519.
        * sub () - Entity that the token belongs to, usually the user ID (it is good practice that this ID is not the same as the database);
        * iss (emitter) - sets the emitter of the token;
        * exp (expiration) - Timestamp of when the token will expire;
        * iat (issued at) - Timestamp from when the token was created.
        
        **Public claims**: Attributes that are not part of the pattern, and are defined especially for sharing information between applications.
        
        * scopes - A developer-defined attribute that specifies token access scopes.
        
        Example of values that can compose the payload.:
      
      
        ```json
        {
          "sub": "5accb6215ba48413e81e7853e",
          "iss": "haniot",
          "exp": 1534020202,
          "iat": 1534009474,
          "scopes": "users:readAll users:register users:read users:update users:remove"
        }
      
      operationId: authUser
      responses:
        '201':
          description: User successfully authenticated.
          content:
            application/json:
              example:
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI1YWNjYjYyMTViYTQ4NDEzZTgxZTc4NTNlIiwiaXNzIjoiaGFuaW90IiwiZXhwIjoxNTM0MDIwMjAyLCJpYXQiOjE1MzQwMDk0NzQsInNjb3BlcyI6InVzZXJzOnJlYWRBbGwgdXNlcnM6cmVnaXN0ZXIgdXNlcnM6cmVhZCB1c2Vyczp1cGRhdGUgdXNlcnM6cmVtb3ZlIn0.vkan_NyX-PwPwlACkg7PqqTKUEbnBOSBSu_aq3gUZRM
                      
        '400':
          description: >-
            Request can not be met, syntactically incorrect or violates the 
            schema. Normally it occurs due to validation issues, such as 
            fields that are expected in the request body and not passed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: >-
            Specified resource does not exist. Usually when the URI is incorrect
            or the resource is not found, or even no longer exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '406':
          description: >-
            The server is not implementing the media type requested by the client
            for the application response. Only application/json is currently 
            accepted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '415':
          description: >-
           The server does not support the requested payload format. Only 
           application/json is accepted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: The rate limit for requests exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            An internal server error occurred. Although the client appears to
            provide a correct request, the server encountered an unexpected
            condition that prevented it from responding to the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              example:
                email: loremipsum@mail.com
                password: loremipsum123
        description: Data of the user to perform authentication.
        required: true
  /users/admin:
    post:
      security:
        - JWTAuth: []  
      tags:
        - users
      summary: Register admin user.
      description: Register a new user as admin.
      operationId: addAdminUser
      responses:
        '201':
          description: User successfully registered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: >-
            Request can not be met, syntactically incorrect or violates the 
            schema. Normally it occurs due to validation issues, such as 
            fields that are expected in the request body and not passed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication failed for lack of authentication credentials or the token user is not properly registered as a consumer at the gateway.
          content:
            application/json:
              schema:
                example:
                  code: 401
                  message: UNAUTHORIZED. 
                  description: "Authentication failed for lack of authentication credentials."
                  redirect_link: /users/auth
        '403':
          description: Authorization failed due to insufficient permissions.
          content:
            application/json:
              schema:
                example:
                  code: 403
                  message: FORBIDDEN. 
                  description: "Authorization failed due to insufficient permissions."
        '404':
          description: >-
            Specified resource does not exist. Usually when the URI is incorrect
            or the resource is not found, or even no longer exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '406':
          description: >-
            The server is not implementing the media type requested by the client
            for the application response. Only application/json is currently 
            accepted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '415':
          description: >-
           The server does not support the requested payload format. Only 
           application/json is accepted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: The rate limit for requests exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            An internal server error occurred. Although the client appears to
            provide a correct request, the server encountered an unexpected
            condition that prevented it from responding to the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name: 
                  type: string
                  example: Lorem Ipsum
                email: 
                  type: string
                  example: loremipsum@mail.com
                password:
                  type: string
                  example: 'lorem123'
        description: Data of the user to be saved.
        required: true
  /users/caregiver:
    post:
      security:
        - JWTAuth: []  
      tags:
        - users
      summary: Register caregiver user.
      description: Register a new user as caregiver.
      operationId: addCaregiverUser
      responses:
        '201':
          description: User successfully registered.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: >-
            Request can not be met, syntactically incorrect or violates the 
            schema. Normally it occurs due to validation issues, such as 
            fields that are expected in the request body and not passed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication failed for lack of authentication credentials or the token user is not properly registered as a consumer at the gateway.
          content:
            application/json:
              schema:
                example:
                  code: 401
                  message: UNAUTHORIZED. 
                  description: "Authentication failed for lack of authentication credentials."
                  redirect_link: /users/auth
        '403':
          description: Authorization failed due to insufficient permissions.
          content:
            application/json:
              schema:
                example:
                  code: 403
                  message: FORBIDDEN. 
                  description: "Authorization failed due to insufficient permissions."
        '404':
          description: >-
            Specified resource does not exist. Usually when the URI is incorrect
            or the resource is not found, or even no longer exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '406':
          description: >-
            The server is not implementing the media type requested by the client
            for the application response. Only application/json is currently 
            accepted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '415':
          description: >-
           The server does not support the requested payload format. Only 
           application/json is accepted.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: The rate limit for requests exceeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: >-
            An internal server error occurred. Although the client appears to
            provide a correct request, the server encountered an unexpected
            condition that prevented it from responding to the request."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name: 
                  type: string
                  example: Lorem Ipsum
                email: 
                  type: string
                  example: loremipsum@mail.com
                password:
                  type: string
                  example: 'lorem123'
        description: Data of the user to be saved.
        required: true
components:
  securitySchemes:
    JWTAuth:            
      type: http
      scheme: bearer
      bearerFormat: JWT   
  schemas:
    User:
      type: object
      description: Representation of resource User.
      required:
        - name
        - email
        - password
        - type
      properties:
        id:
          type: string
          format: uuid
          description: Automatically generated key field.
          example: 5accb6215ba48413e81e7853e
          readOnly: true
        name:
          type: string
          description: Name of the user.
          example: Lorem Ipsum
        email:
          type: string
          description: User email.
          example: loremipsum@mail.com     
        type:
          type: number
          description: Type of user.
          example: 1
          readOnly: true
        created_at:
          type: string
          format: date-time
          description: >-
            Date and hour according to the UTC pattern, automatically generated 
            on moment that resource is saved on server.
          readOnly: true
    Error:
      type: object
      description: >-
        Default template for error message. All returned errors will follow this
        template.
      required:
        - code
        - message
      properties:
        code:
          type: integer
          description: >-
            Unique API code that indicates specific details of the error, or
            the actual status code of the response when the unique code is not
            appropriate.
        message:
          type: string
          description: Readable and short description of the error.
        description:
          type: string
          description: Detailed description of the error.
        redirect_link:
          type: string
  parameters:
    fieldsParam:
      in: query
      name: fields
      required: false
      description: >-
        Allows you to retrieve only the information you want. To do this, 
        simply provide the name of the attributes separated by commas. 
        For example: **_fields=field1,field2_** indicates that only 
        field1 and field2 should be listed in the query result.
      schema:
        type: array
        items:
          type: string
    pageParam:
      in: query
      name: page
      required: false
      description: The page number.
      schema:
        type: integer
        format: int32
        minimum: 1
        default: 1
    limitParam:
      in: query
      name: limit
      required: false
      description: The number of items to return.
      schema:
        type: integer
        format: int32
        maximum: 100
        default: 20
    sortParam:
      in: query
      name: sort
      required: false
      description: >-
        Contains the names of the attributes, separated by commas, that
        will be used to sort the result of the query. For ascending sort,
        use the '+' character before the attribute name. For descending 
        sort, use the '-' character before the attribute name. By default,
        the order is ascending, so the '+' symbol is optional, just enter
        the attribute.
      schema:
        type: array
        items:
          type: string
        default:
          - created_at
    filterParam:
      in: query
      name: ''
      required: false
      description: >-
        To filter a collection by multiple concurrent attributes or filter 
        multiple values for an attribute, simply use the attribute/property
        name with an equal sign and the expected values, separated by a comma.
        **_property=value1,value2,value3_**. The query is not case sensitive.
        Example: **_?name=elvis,john_** to retrieve exactly the same users with 
        elvis or john name.
        For filtering with logical operators, just follow the syntax:
        **_property=operator:value_**. The available operators are:
         - **gt** -> Defines which value of the attribute is greater than 
                    (that is,>) the specified value.
         - **gte** -> Defines which attribute value is greater than or equal to
                    (that is,>=) the specified value.
         - **lt** -> Define the value of the attribute to be less than (that is, <)
                    the specified value.
         - **lte** -> Defines which value of the attribute is less than or equal to 
                    (that is, <=) the specified value.

        Example: **_?field1=gte:80&age=lt:100_** to recover the users with age 
        is greater than or equal to 80 and less then 100.
      schema:
        type: string
    dateStartParam:
      in: query
      name: date_start
      required: false
      description: >-
        Define start date in format: YYYY-MM-DD ou YYYY-MM-DD hh:mm:ss. The
        attribute used for the query will be the registration_date.
      schema:
        type: string
    dateEndParam:
      in: query
      name: date_end
      required: false
      description: >-
        Define end date in format: YYYY-MM-DD ou YYYY-MM-DD hh:mm:ss.The
        attribute used for the query will be the registration_date. 
      schema:
        type: string
        default: today
    periodParam:
      in: query
      name: period
      required: false
      description: |-
        Sets the period from the available ones:
         - **[1..n]d** - Total days (1d, 2d, ...)
         - **[1..n]w** - Total of weeks (1w, 2w, ...)
         - **[1..n]m** - Total of months (1m, 2m, ...)
         - **[1..n]y** - Total of years (1y, 2y, ...)
        The attribute used for the query will be the registration_date.
      schema:
        type: string